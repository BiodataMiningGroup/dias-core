{"version":3,"sources":["projects/main.js","projects/controllers/ProjectDeleteController.js","projects/controllers/ProjectDeleteModalController.js","projects/controllers/ProjectIndexController.js","projects/controllers/ProjectInformationController.js","projects/controllers/ProjectLabelsController.js","projects/controllers/ProjectMembersContainerController.js","projects/controllers/ProjectMembersController.js","projects/directives/labelCategoryItem.js","projects/directives/projectMember.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxpfile":"main.js","sourcesContent":["/**\n * @namespace biigle.projects\n * @description The DIAS projects module.\n */\nangular.module('biigle.projects', ['biigle.api', 'biigle.ui.messages', 'biigle.ui.users', 'ui.bootstrap']);\n","/**\n * @namespace biigle.projects\n * @ngdoc controller\n * @name ProjectDeleteController\n * @memberOf biigle.projects\n * @description Initiates the deletion confirmation modal\n * @example\n\n */\nangular.module('biigle.projects').controller('ProjectDeleteController', function ($scope, $modal, $attrs, msg) {\n\t\t\"use strict\";\n\n\t\tvar success = function () {\n\t\t\t$scope.redirectToDashboard($attrs.successMsg);\n\t\t};\n\n\t\tvar error = function () {\n\t\t\tmsg.danger($attrs.errorMsg);\n\t\t};\n\n\t\t$scope.submit = function () {\n\t\t\tvar modalInstance = $modal.open({\n\t\t\t\ttemplateUrl: 'confirmDeleteModal.html',\n\t\t\t\tsize: 'sm',\n\t\t\t\tcontroller: 'ProjectDeleteModalController',\n\t\t\t\tscope: $scope\n\t\t\t});\n\n\t\t\tmodalInstance.result.then(function (result) {\n\t\t\t\tswitch (result) {\n\t\t\t\t\tcase 'success':\n\t\t\t\t\t\tsuccess();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'error':\n\t\t\t\t\t\terror();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t}\n);\n","/**\n * @namespace biigle.projects\n * @ngdoc controller\n * @name ProjectDeleteModalController\n * @memberOf biigle.projects\n * @description Handles the confirmation of deletion of a project.\n * @example\n\n */\nangular.module('biigle.projects').controller('ProjectDeleteModalController', function ($scope, Project) {\n\t\t\"use strict\";\n\n\t\t$scope.force = false;\n\n\t\tvar deleteSuccess = function (response) {\n\t\t\t$scope.$close('success');\n\t\t};\n\n\t\tvar deleteError = function(response) {\n\t\t\tif (response.status === 400) {\n\t\t\t\t$scope.force = true;\n\t\t\t} else {\n\t\t\t\t$scope.$close('error');\n\t\t\t}\n\t\t};\n\n\t\t$scope.delete = function () {\n\t\t\tvar params = $scope.force ? {force: true} : {};\n\t\t\t$scope.project.$delete(params, deleteSuccess, deleteError);\n\t\t};\n\t}\n);\n","/**\n * @namespace biigle.projects\n * @ngdoc controller\n * @name ProjectIndexController\n * @memberOf biigle.projects\n * @description Root controller of the project index page.\n */\nangular.module('biigle.projects').controller('ProjectIndexController', function ($scope, $attrs, Project, $modal, ProjectUser, msg, $timeout) {\n\t\t\"use strict\";\n\n\t\tvar leavingSuccess = function () {\n\t\t\t$scope.redirectToDashboard($attrs.leavingSuccessMsg);\n\t\t};\n\n\t\t$scope.redirectToDashboard = function (message, type) {\n\t\t\ttype = type || 'success';\n\t\t\tmsg.post(type, message);\n\t\t\t$timeout(function () {\n\t\t\t\twindow.location.href = $attrs.dashboardUrl;\n\t\t\t}, 2000);\n\t\t};\n\n\t\t$scope.project = Project.get({id: $attrs.projectId});\n\n\t\t$scope.projectId = $attrs.projectId;\n\n\t\t$scope.ownUserId = $attrs.userId;\n\n\t\t$scope.leaveProject = function () {\n\t\t\tvar modalInstance = $modal.open({\n\t\t\t\ttemplateUrl: 'confirmLeaveProjectModal.html',\n\t\t\t\tsize: 'sm'\n\t\t\t});\n\n\t\t\tmodalInstance.result.then(function (result) {\n\t\t\t\tif (result == 'yes') {\n\t\t\t\t\tProjectUser.detach({project_id: $scope.project.id}, {id: $scope.ownUserId}, leavingSuccess, msg.responseError);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t}\n);\n","/**\n * @namespace biigle.projects\n * @ngdoc controller\n * @name ProjectInformationController\n * @memberOf biigle.projects\n * @description Handles modification of the information of a project.\n * @example\n\n */\nangular.module('biigle.projects').controller('ProjectInformationController', function ($scope) {\n\t\t\"use strict\";\n\t\t\n\t\t$scope.edit = function () {\n\t\t\t$scope.editing = !$scope.editing;\n\t\t};\n\t}\n);\n","/**\n * @namespace biigle.projects\n * @ngdoc controller\n * @name ProjectLabelsController\n * @memberOf biigle.projects\n * @description Handles modification of the labels of a project.\n * @example\n\n */\nangular.module('biigle.projects').controller('ProjectLabelsController', function ($scope, ProjectLabel, Label, msg) {\n\t\t\"use strict\";\n\n        var buildTree = function (label) {\n            var parent = label.parent_id;\n            if ($scope.categoriesTree[parent]) {\n                $scope.categoriesTree[parent].push(label);\n            } else {\n                $scope.categoriesTree[parent] = [label];\n            }\n        };\n\n        var refreshLabels = function () {\n            $scope.labels = ProjectLabel.query({project_id: $scope.projectId}, function () {\n                $scope.categoriesTree = {};\n                $scope.labels.forEach(buildTree);\n            });\n        };\n\n        refreshLabels();\n\n        // label that should be newly created on submit\n        $scope.newLabel = {\n            parent_id: null,\n            name: null,\n            project_id: $scope.projectId\n        };\n\n        // currently selected label\n        $scope.selected = {\n            label: null\n        };\n\n        $scope.edit = function () {\n            $scope.editing = !$scope.editing;\n        };\n\n        $scope.selectItem = function (item) {\n            $scope.selected.label = item;\n            $scope.newLabel.parent_id = item ? item.id : null;\n            $scope.$broadcast('categories.selected', $scope.newLabel.parent_id);\n        };\n\n        $scope.remove = function (id) {\n            // always use force here because the user already had to confirm deletion\n            Label.delete({id: id, force: true}, function () {\n                if ($scope.selected.label.id === id) {\n                    $scope.selectItem(null);\n                }\n                refreshLabels();\n            });\n        };\n\n        $scope.addLabel = function () {\n            Label.add($scope.newLabel, function (response) {\n                $scope.labels.push(response);\n                buildTree(response);\n                $scope.$broadcast('categories.refresh');\n                $scope.newLabel.name = '';\n            }, msg.responseError);\n        };\n\t}\n);\n","/**\n * @namespace biigle.projects\n * @ngdoc controller\n * @name ProjectMembersContainerController\n * @memberOf biigle.projects\n * @description Contains project members of a certain role. New members can be dropped in.\n */\nangular.module('biigle.projects').controller('ProjectMembersContainerController', function ($scope, $element, $attrs) {\n\t\t\"use strict\";\n\n\t\tvar dragover = function (e) {\n\t\t\t$scope.hovering = true;\n\t\t\t$scope.$apply();\n\t\t\t e.preventDefault();\n\t\t};\n\n\t\tvar dragleave = function (e) {\n\t\t\t$scope.hovering = false;\n\t\t\t$scope.$apply();\n\t\t};\n\n\t\tvar drop = function (e) {\n\t\t\t$scope.hovering = false;\n\t\t\t$scope.changeUserRole(\n\t\t\t\t// user id\n\t\t\t\te.dataTransfer.getData('text/plain'),\n\t\t\t\t// new role name\n\t\t\t\t$attrs.role\n\t\t\t);\n\t\t\t$scope.$apply();\n\t\t\te.preventDefault();\n\t\t};\n\n\t\t// only allow dropping if editing\n\t\t$scope.$watch('editing', function (editing) {\n\t\t\tif (editing) {\n\t\t\t\t$element.on('dragover', dragover);\n\t\t\t\t$element.on('dragleave', dragleave);\n\t\t\t\t$element.on('drop', drop);\n\t\t\t} else {\n\t\t\t\t$element.off('dragover', dragover);\n\t\t\t\t$element.off('dragleave', dragleave);\n\t\t\t\t$element.off('drop', drop);\n\t\t\t}\n\t\t});\n\t}\n);\n","/**\n * @namespace biigle.projects\n * @ngdoc controller\n * @name ProjectMembersController\n * @memberOf biigle.projects\n * @description Handles modification of the members of a project.\n */\nangular.module('biigle.projects').controller('ProjectMembersController', function ($scope, Role, ProjectUser, msg, $modal) {\n\t\t\"use strict\";\n\n\t\tvar getUser = function (id) {\n\t\t\tfor (var i = $scope.users.length - 1; i >= 0; i--) {\n\t\t\t\tif ($scope.users[i].id == id) {\n\t\t\t\t\treturn $scope.users[i];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tvar confirmChangeOwnRole = function (userId, role) {\n\t\t\tvar modalInstance = $modal.open({\n\t\t\t\ttemplateUrl: 'confirmChangeRoleModal.html',\n\t\t\t\tsize: 'sm'\n\t\t\t});\n\n\t\t\tmodalInstance.result.then(function (result) {\n\t\t\t\tif (result == 'yes') {\n\t\t\t\t\t$scope.changeUserRole(userId, role, true);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tRole.query(function (rolesArray) {\n\t\t\t$scope.roles = {};\n\t\t\tfor (var i = rolesArray.length - 1; i >= 0; i--) {\n\t\t\t\t$scope.roles[rolesArray[i].name] = rolesArray[i].id;\n\t\t\t}\n\t\t});\n\n\t\t$scope.users = ProjectUser.query({ project_id: $scope.projectId });\n\n\t\t$scope.edit = function () {\n\t\t\t$scope.editing = !$scope.editing;\n\t\t};\n\n\t\t$scope.addUser = function (user) {\n\t\t\t// new users are guests by default\n\t\t\tvar roleId = $scope.roles.guest;\n\n\t\t\tvar success = function () {\n\t\t\t\tuser.project_role_id = roleId;\n\t\t\t\t$scope.users.push(user);\n\t\t\t};\n\n\t\t\t// user shouldn't already exist\n\t\t\tif (!getUser(user.id)) {\n\t\t\t\tProjectUser.attach(\n\t\t\t\t\t{project_id: $scope.projectId},\n\t\t\t\t\t{id: user.id, project_role_id: roleId},\n\t\t\t\t\tsuccess, msg.responseError\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\n\t\t$scope.changeUserRole = function (userId, role, force) {\n\t\t\tif (!force && userId == $scope.ownUserId) {\n\t\t\t\tconfirmChangeOwnRole(userId, role);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar user = getUser(userId);\n\t\t\tvar roleId = $scope.roles[role];\n\n\t\t\t// no action required\n\t\t\tif (user.project_role_id == roleId) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar success = function () {\n\t\t\t\tuser.project_role_id = roleId;\n\t\t\t};\n\n\t\t\tProjectUser.save(\n\t\t\t\t{project_id: $scope.projectId},\n\t\t\t\t{id: user.id, project_role_id: roleId},\n\t\t\t\tsuccess, msg.responseError\n\t\t\t);\n\t\t};\n\n\t\t$scope.removeUser = function (userId) {\n\t\t\t// leaving the project will be handled by parent controller\n\t\t\tif (userId == $scope.ownUserId) {\n\t\t\t\t$scope.leaveProject();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar success = function () {\n\t\t\t\tvar index;\n\n\t\t\t\tfor (var i = $scope.users.length - 1; i >= 0; i--) {\n\t\t\t\t\tif ($scope.users[i].id == userId) {\n\t\t\t\t\t\tindex = i;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$scope.users.splice(index, 1);\n\t\t\t};\n\n\t\t\tProjectUser.detach(\n\t\t\t\t{project_id: $scope.projectId},\n\t\t\t\t{id: userId},\n\t\t\t\tsuccess, msg.responseError\n\t\t\t);\n\t\t};\n\t}\n);\n","/**\n * @namespace biigle.projects\n * @ngdoc directive\n * @name projectLabelCategoryItem\n * @memberOf biigle.projects\n * @description A label category list item.\n */\nangular.module('biigle.projects').directive('projectLabelCategoryItem', function ($compile, $timeout, $templateCache) {\n        \"use strict\";\n\n        return {\n            restrict: 'C',\n\n            templateUrl: 'label-item.html',\n\n            scope: true,\n\n            link: function (scope, element, attrs) {\n                // wait for this element to be rendered until the children are\n                // appended, otherwise there would be too much recursion for\n                // angular\n                var content = angular.element($templateCache.get('label-subtree.html'));\n                $timeout(function () {\n                    element.append($compile(content)(scope));\n                });\n            },\n\n            controller: function ($scope) {\n                // open the subtree of this item\n                $scope.isOpen = false;\n                // this item has children\n                $scope.isExpandable = !!$scope.categoriesTree[$scope.item.id];\n                // this item is currently selected\n                $scope.isSelected = false;\n                // the user clicked on the 'x' button\n                $scope.removing = false;\n\n                $scope.startRemove = function () {\n                    $scope.removing = true;\n                };\n\n                $scope.cancelRemove = function () {\n                    $scope.removing = false;\n                };\n\n                // handle this by the event rather than an own click handler to\n                // deal with click and search field actions in a unified way\n                $scope.$on('categories.selected', function (e, categoryId) {\n                    // if an item is selected, its subtree and all parent items\n                    // should be opened\n                    if ($scope.item.id === categoryId) {\n                        $scope.isOpen = true;\n                        $scope.isSelected = true;\n                        // this hits all parent scopes/items\n                        $scope.$emit('categories.openParents');\n                    } else {\n                        $scope.isOpen = false;\n                        $scope.isSelected = false;\n                    }\n                });\n\n                // if a child item was selected, this item should be opened, too\n                // so the selected item becomes visible in the tree\n                $scope.$on('categories.openParents', function (e) {\n                    $scope.isOpen = true;\n                    // stop propagation if this is a root element\n                    if ($scope.item.parent_id === null) {\n                        e.stopPropagation();\n                    }\n                });\n\n                // check, if item still has children\n                $scope.$on('categories.refresh', function (e) {\n                    $scope.isExpandable = !!$scope.categoriesTree[$scope.item.id];\n                });\n            }\n        };\n    }\n);\n","/**\n * @namespace biigle.projects\n * @ngdoc directive\n * @name projectMember\n * @memberOf biigle.projects\n * @description A project member element in the project members overview.\n */\nangular.module('biigle.projects').directive('projectMember', function () {\n\t\t\"use strict\";\n\n\t\treturn {\n\t\t\trestrict: 'A',\n\n\t\t\tlink: function (scope, element, attrs) {\n\t\t\t\tvar dragstart = function (e) {\n\t\t\t\t\te.dataTransfer.effectAllowed = 'move';\n  \t\t\t\t\te.dataTransfer.setData('text/plain', scope.user.id);\n\t\t\t\t};\n\n\t\t\t\t// disable dragging when removing is in progress\n\t\t\t\tscope.$watch('removing', function (removing) {\n\t\t\t\t\tif (removing) {\n\t\t\t\t\t\telement.off('dragstart', dragstart);\n\t\t\t\t\t} else {\n\t\t\t\t\t\telement.on('dragstart', dragstart);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// when editing is switched off, removing is canceled, too\n\t\t\t\tscope.$watch('editing', function (editing) {\n\t\t\t\t\tif (!editing) {\n\t\t\t\t\t\tscope.cancelRemove();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t},\n\t\t\t\n\t\t\tcontroller: function ($scope) {\n\t\t\t\t$scope.startRemove = function () {\n\t\t\t\t\t$scope.removing = true;\n\t\t\t\t};\n\n\t\t\t\t$scope.cancelRemove = function () {\n\t\t\t\t\t$scope.removing = false;\n\t\t\t\t};\n\n\t\t\t\t$scope.remove = function () {\n\t\t\t\t\t$scope.removeUser($scope.user.id);\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t}\n);\n"],"sourceRoot":"/source/"}
