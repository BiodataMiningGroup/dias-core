angular.module("dias.projects",["dias.api","dias.ui.messages","dias.ui.users","ui.bootstrap"]),angular.module("dias.projects").controller("ProjectDeleteController",["$scope","$modal","$attrs","msg",function(e,r,o,t){"use strict";var n=function(){e.redirectToDashboard(o.successMsg)},c=function(){t.danger(o.errorMsg)};e.submit=function(){var o=r.open({templateUrl:"confirmDeleteModal.html",size:"sm",controller:"ProjectDeleteModalController",scope:e});o.result.then(function(e){switch(e){case"success":n();break;case"error":c()}})}}]),angular.module("dias.projects").controller("ProjectDeleteModalController",["$scope","Project",function(e){"use strict";e.force=!1;var r=function(){e.$close("success")},o=function(r){400===r.status?e.force=!0:e.$close("error")};e.delete=function(){var t=e.force?{force:!0}:{};e.project.$delete(t,r,o)}}]),angular.module("dias.projects").controller("ProjectIndexController",["$scope","$attrs","Project","$modal","ProjectUser","msg","$timeout",function(e,r,o,t,n,c,s){"use strict";var i=function(){e.redirectToDashboard(r.leavingSuccessMsg)};e.redirectToDashboard=function(e,o){o=o||"success",c.post(o,e),s(function(){window.location.href=r.dashboardUrl},2e3)},e.project=o.get({id:r.projectId}),e.projectId=r.projectId,e.ownUserId=r.userId,e.leaveProject=function(){var r=t.open({templateUrl:"confirmLeaveProjectModal.html",size:"sm"});r.result.then(function(r){"yes"==r&&n.detach({project_id:e.project.id},{id:e.ownUserId},i,c.responseError)})}}]),angular.module("dias.projects").controller("ProjectInformationController",["$scope",function(e){"use strict";e.edit=function(){e.editing=!e.editing}}]),angular.module("dias.projects").controller("ProjectMembersContainerController",["$scope","$element","$attrs",function(e,r,o){"use strict";var t=function(r){e.hovering=!0,e.$apply(),r.preventDefault()},n=function(){e.hovering=!1,e.$apply()},c=function(r){e.hovering=!1,e.changeUserRole(r.dataTransfer.getData("text/plain"),o.role),e.$apply(),r.preventDefault()};e.$watch("editing",function(e){e?(r.on("dragover",t),r.on("dragleave",n),r.on("drop",c)):(r.off("dragover",t),r.off("dragleave",n),r.off("drop",c))})}]),angular.module("dias.projects").controller("ProjectMembersController",["$scope","Role","ProjectUser","msg","$modal",function(e,r,o,t,n){"use strict";var c=function(r){for(var o=e.users.length-1;o>=0;o--)if(e.users[o].id==r)return e.users[o]},s=function(r,o){var t=n.open({templateUrl:"confirmChangeRoleModal.html",size:"sm"});t.result.then(function(t){"yes"==t&&e.changeUserRole(r,o,!0)})};r.query(function(r){e.roles={};for(var o=r.length-1;o>=0;o--)e.roles[r[o].name]=r[o].id}),e.users=o.query({project_id:e.projectId}),e.edit=function(){e.editing=!e.editing},e.addUser=function(r){var n=e.roles.guest,s=function(){r.project_role_id=n,e.users.push(r)};c(r.id)||o.attach({project_id:e.projectId},{id:r.id,project_role_id:n},s,t.responseError)},e.changeUserRole=function(r,n,i){if(!i&&r==e.ownUserId)return s(r,n),void 0;var a=c(r),l=e.roles[n];if(a.project_role_id!=l){var d=function(){a.project_role_id=l};o.save({project_id:e.projectId},{id:a.id,project_role_id:l},d,t.responseError)}},e.removeUser=function(r){if(r==e.ownUserId)return e.leaveProject(),void 0;var n=function(){for(var o,t=e.users.length-1;t>=0;t--)if(e.users[t].id==r){o=t;break}e.users.splice(o,1)};o.detach({project_id:e.projectId},{id:r},n,t.responseError)}}]),angular.module("dias.projects").directive("projectMember",function(){"use strict";return{restrict:"A",link:function(e,r){var o=function(r){r.dataTransfer.effectAllowed="move",r.dataTransfer.setData("text/plain",e.user.id)};e.$watch("removing",function(e){e?r.off("dragstart",o):r.on("dragstart",o)}),e.$watch("editing",function(r){r||e.cancelRemove()})},controller:["$scope",function(e){e.startRemove=function(){e.removing=!0},e.cancelRemove=function(){e.removing=!1},e.remove=function(){e.removeUser(e.user.id)}}]}});
//# sourceMappingURL=data:application/json;base64,