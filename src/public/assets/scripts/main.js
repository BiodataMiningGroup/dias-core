angular.module("dias.transects",["dias.api"]);try{angular.module("dias.projects").controller("ProjectTransectController",["$scope","$element","$modal","ProjectTransect","msg",function(e,t,n,r,c){"use strict";var o=function(){var e=n.open({templateUrl:"confirmDeleteTransectModal.html",size:"sm"});return e},i=function(){e.removeTransect(e.$index)},a=function(t){400===t.status?o().result.then(function(t){"force"==t?e.remove(!0):e.cancelRemove()}):c.responseError(t)};e.startRemove=function(){e.removing=!0},e.cancelRemove=function(){e.removing=!1},e.remove=function(t){var n;n=t?{project_id:e.projectId,force:!0}:{project_id:e.projectId},r.detach(n,{id:e.transect.id},i,a)},e.$watch("editing",function(t){t||e.cancelRemove()})}])}catch(e){}try{angular.module("dias.projects").controller("ProjectTransectsController",["$scope","ProjectTransect",function(e,t){"use strict";e.transects=t.query({project_id:e.projectId}),e.edit=function(){e.editing=!e.editing},e.removeTransect=function(t){e.transects.splice(t,1)},e.$watchCollection("transects",function(t){t&&0===t.length&&(e.editing=!1)})}])}catch(e){}angular.module("dias.transects").controller("ImagesController",["$scope","TransectImage","$attrs","$element","$timeout",function(e,t,n,r,c){"use strict";var o,i,a=r[0],s=20,l=100,d=function(){return o=a.getBoundingClientRect(),o.bottom<=window.innerHeight+l},u=function(){d()&&(e.limit+=s,e.$apply())},m=function(){d()?(e.limit+=s,i=c(m,500)):(c.cancel(i),window.addEventListener("scroll",u),window.addEventListener("resize",u))};e.images=t.query({transect_id:n.transectId}),e.imageUrl=n.imageUrl,e.apiUrl=n.apiUrl,e.limit=20,c(m)}]);
//# sourceMappingURL=data:application/json;base64,