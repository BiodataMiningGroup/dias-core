{"version":3,"sources":["main.js","constants/URL.js","controller/MessagesController.js","factories/Annotation.js","factories/AnnotationLabel.js","factories/AnnotationPoint.js","factories/Attribute.js","factories/Image.js","factories/ImageAnnotation.js","factories/Label.js","factories/MediaType.js","factories/OwnUser.js","factories/Project.js","factories/ProjectTransect.js","factories/ProjectUser.js","factories/Role.js","factories/Shape.js","factories/Transect.js","factories/TransectImage.js","factories/User.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"main.js","sourcesContent":["/**\n * @namespace dias.core\n * @description The DIAS core AngularJS module.\n */\nangular.module('dias.core', ['ngResource']);\n\nangular.module('dias.core').config(function ($httpProvider) {\n\t\"use strict\";\n\n\t$httpProvider.defaults.headers.common[\"X-Requested-With\"] =\n\t\t\"XMLHttpRequest\";\n});\n\n/**\n * @namespace dias.messages\n * @description The DIAS user feedback messages AngularJS module.\n */\nangular.module('dias.messages', ['ui.bootstrap']);\n\n// bootstrap the messages module\nangular.element(document).ready(function () {\n\t\"use strict\";\n\n\tangular.bootstrap(\n\t\tdocument.querySelector('[data-ng-controller=\"MessagesController\"]'),\n\t\t['dias.messages']\n\t);\n});","/**\n * @ngdoc constant\n * @name URL\n * @memberOf dias.core\n * @description The base url of the application.\n * @returns {String}\n *\n */\nangular.module('dias.core').constant('URL', window.$diasBaseUrl || '');","/**\n * @namespace dias.messages\n * @ngdoc controller\n * @name MessagesController\n * @memberOf dias.messages\n * @description Handles the live display of user feedback messages vir JS\n * @example\n\n */\nangular.module('dias.messages').controller('MessagesController', function ($scope, $sce) {\n\t\t\"use strict\";\n\n\t\tvar maxMessages = 2;\n\t\t$scope.alerts = [];\n\n\t\t// make method accessible by other modules\n\t\twindow.$diasPostMessage = function (message, type) {\n\t\t\t$scope.$apply(function() {\n\t\t\t\t$scope.alerts.unshift({\n\t\t\t\t\tmessage: $sce.trustAsHtml(message),\n\t\t\t\t\ttype: type || 'info'\n\t\t\t\t});\n\n\t\t\t\tif ($scope.alerts.length > maxMessages) {\n\t\t\t\t\t$scope.alerts.pop();\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\t$scope.close = function (index) {\n\t\t\t$scope.alerts.splice(index, 1);\n\t\t};\n\t}\n);\n","/**\n * @ngdoc factory\n * @name Annotation\n * @memberOf dias.core\n * @description Provides the resource for annotations.\n * @requires $resource\n * @returns {Object} A new [ngResource](https://docs.angularjs.org/api/ngResource/service/$resource) object\n * @example\n// retrieving the shape ID of an annotation\nvar annotation = Annotation.get({id: 123}, function () {\n   console.log(annotation.shape_id);\n});\n\n// deleting an annotation\nvar annotation = Annotation.get({id: 123}, function () {\n   annotation.$delete();\n});\n// or directly\nAnnotation.delete({id: 123});\n * \n */\nangular.module('dias.core').factory('Annotation', function ($resource, URL) {\n\t\"use strict\";\n\n\treturn $resource(URL + '/api/v1/annotations/:id/', { id: '@id'\t});\n});","/**\n * @ngdoc factory\n * @name AnnotationLabel\n * @memberOf dias.core\n * @description Provides the resource for annotation labels.\n * @requires $resource\n * @returns {Object} A new [ngResource](https://docs.angularjs.org/api/ngResource/service/$resource) object\n * @example\n// get all labels of an annotation and update one of them\nvar labels = AnnotationLabel.query({annotation_id: 1}, function () {\n   var label = labels[0];\n   label.confidence = 0.9;\n   label.$save();\n});\n\n// directly update a label\nAnnotationLabel.save({confidence: 0.1, annotation_id: 1, id: 1});\n\n// attach a new label to an annotation\nvar label = AnnotationLabel.attach({label_id: 1, confidence: 0.5, annotation_id: 1}, function () {\n   console.log(label); // {id: 1, name: 'my label', user_id: 1, ...}\n});\n\n\n// detach a label\nvar labels = AnnotationLabel.query({annotation_id: 1}, function () {\n   var label = labels[0];\n   label.$detach();\n});\n// or directly\nAnnotationLabel.detach({id: 1, annotation_id: 1});\n * \n */\nangular.module('dias.core').factory('AnnotationLabel', function ($resource, URL) {\n\t\"use strict\";\n\n\treturn $resource(URL + '/api/v1/annotations/:annotation_id/labels/:id', {\n\t\t\tid: '@id',\n\t\t\tannotation_id: '@annotation_id'\n\t\t}, {\n\t\t\tattach: {method: 'POST'},\n\t\t\tsave: {method: 'PUT'},\n\t\t\tdetach: {method: 'DELETE'}\n\t});\n});","/**\n * @ngdoc factory\n * @name AnnotationPoint\n * @memberOf dias.core\n * @description Provides the resource for annotation points.\n * @requires $resource\n * @returns {Object} A new [ngResource](https://docs.angularjs.org/api/ngResource/service/$resource) object\n * @example\n// get all points of an annotation and update one of them\nvar points = AnnotationPoint.query({annotation_id: 1}, function () {\n   var point = points[0];\n   point.x = 100;\n   point.$save();\n});\n\n// directly update a point\nAnnotationPoint.save({x: 10, y: 10, annotation_id: 1, id: 1});\n\n// add a new point to an annotation\nvar point = AnnotationPoint.add({x: 50, y: 40, annotation_id: 1}, function () {\n   console.log(point); // {x: 50, y: 40, annotation_id: 1, index: 1, id: 1}\n});\n\n// delete a point\nvar points = AnnotationPoint.query({annotation_id: 1}, function () {\n   var point = points[0];\n   point.$delete();\n});\n// or directly\nAnnotationPoint.delete({id: 1, annotation_id: 1});\n * \n */\nangular.module('dias.core').factory('AnnotationPoint', function ($resource, URL) {\n\t\"use strict\";\n\n\treturn $resource(URL + '/api/v1/annotations/:annotation_id/points/:id', {\n\t\t\tid: '@id',\n\t\t\tannotation_id: '@annotation_id'\n\t\t}, {\n\t\t\tadd: {method: 'POST'},\n\t\t\tsave: {method: 'PUT'}\n\t});\n});","/**\n * @ngdoc factory\n * @name Attribute\n * @memberOf dias.core\n * @description Provides the resource for attributes.\n * @requires $resource\n * @returns {Object} A new [ngResource](https://docs.angularjs.org/api/ngResource/service/$resource) object\n * @example\n// list all attributes\nvar attributes = Attribute.query(function () {\n   console.log(attributes); // [{id: 1, type: 'boolean', ...}, ...]\n});\n\n// get a specific attribute\nvar attribute = Attribute.get({id: 1}, function () {\n   console.log(attribute); // {id: 1, type: 'boolean', ...}\n});\n\n// create a new attribute\nvar attribute = Attribute.add({\n      name: 'bad_quality', type: 'boolean'\n   }, function () {\n      console.log(attribute); // {id: 1, name: 'bad_quality', ...}\n});\n\n// delete an attribute\nvar attributes = Attribute.query(function () {\n   var attribute = attributes[0];\n   attribute.$delete();\n});\n// or directly\nAttribute.delete({id: 1});\n *\n */\nangular.module('dias.core').factory('Attribute', function ($resource, URL) {\n\t\"use strict\";\n\n\treturn $resource(URL + '/api/v1/attributes/:id', { id: '@id' }, {\n\t\tadd: {method: 'POST'}\n\t});\n});","/**\n * @ngdoc factory\n * @name Image\n * @memberOf dias.core\n * @description Provides the resource for images. This resource is only for \n * finding out which transect an image belongs to. The image files are\n * directly called from the API.\n * @requires $resource\n * @returns {Object} A new [ngResource](https://docs.angularjs.org/api/ngResource/service/$resource) object\n * @example\n// get an image\nvar image = Image.get({id: 1}, function () {\n   console.log(image); // {id: 1, transect_id: 1}\n});\n *\n */\nangular.module('dias.core').factory('Image', function ($resource, URL) {\n\t\"use strict\";\n\n\treturn $resource(URL + '/api/v1/images/:id');\n});","/**\n * @ngdoc factory\n * @name ImageAnnotation\n * @memberOf dias.core\n * @description Provides the resource for annotations of an image.\n * @requires $resource\n * @returns {Object} A new [ngResource](https://docs.angularjs.org/api/ngResource/service/$resource) object\n * @example\n// get all annotations of an image\nvar annotations = ImageAnnotation.query({image_id: 1}, function () {\n   console.log(annotations); // [{id: 1, shape_id: 1, ...}, ...]\n});\n\n// add a new annotation to an image\nvar annotation = ImageAnnotation.add({\n   image_id: 1,\n   shape_id: 1,\n   points: [\n      { x: 10, y: 20 }\n   ]\n});\n *\n */\nangular.module('dias.core').factory('ImageAnnotation', function ($resource, URL) {\n\t\"use strict\";\n\n\treturn $resource(\n\t\tURL + '/api/v1/images/:image_id/annotations',\n\t\t{ image_id: '@image_id' },\n\t\t{ add: { method: 'POST' } }\n\t);\n});","/**\n * @ngdoc factory\n * @name Label\n * @memberOf dias.core\n * @description Provides the resource for labels.\n * @requires $resource\n * @returns {Object} A new [ngResource](https://docs.angularjs.org/api/ngResource/service/$resource) object\n * @example\n// get all labels\nvar labels = Label.query(function () {\n   console.log(labels); // [{id: 1, name: \"Benthic Object\", ...}, ...]\n});\n\n// get one label\nvar label = Label.get({id: 1}, function () {\n   console.log(label); // {id: 1, name: \"Benthic Object\", ...}\n});\n\n// create a new label\nvar label = Label.add({name: \"Trash\", parent_id: 1}, function () {\n   console.log(label); // {id: 2, name: \"Trash\", parent_id: 1, ...}\n});\n\n// update a label\nvar label = Label.get({id: 1}, function () {\n   label.name = 'Trash';\n   label.$save();\n});\n// or directly\nLabel.save({id: 1, name: 'Trash'});\n\n// delete a label\nvar label = Label.get({id: 1}, function () {\n   label.$delete();\n});\n// or directly\nLabel.delete({id: 1});\n *\n */\nangular.module('dias.core').factory('Label', function ($resource, URL) {\n\t\"use strict\";\n\n\treturn $resource(URL + '/api/v1/labels/:id', { id: '@id' },\n\t\t{\n\t\t\tadd: {method: 'POST' },\n\t\t\tsave: { method: 'PUT' }\n\t\t}\n\t);\n});","/**\n * @ngdoc factory\n * @name MediaType\n * @memberOf dias.core\n * @description Provides the resource for media types.\n * @requires $resource\n * @returns {Object} A new [ngResource](https://docs.angularjs.org/api/ngResource/service/$resource) object\n * @example\n// get all media types\nvar mediaTypes = MediaType.query(function () {\n   console.log(mediaTypes); // [{id: 1, name: \"time-series\"}, ...]\n});\n\n// get one media type\nvar mediaType = MediaType.get({id: 1}, function () {\n   console.log(mediaType); // {id: 1, name: \"time-series\"}\n});\n *\n */\nangular.module('dias.core').factory('MediaType', function ($resource, URL) {\n\t\"use strict\";\n\n\treturn $resource(URL + '/api/v1/media-types/:id', { id: '@id' });\n});","/**\n * @ngdoc factory\n * @name OwnUser\n * @memberOf dias.core\n * @description Provides the resource for the logged in user.\n * @requires $resource\n * @returns {Object} A new [ngResource](https://docs.angularjs.org/api/ngResource/service/$resource) object\n * @example\n// retrieving the username\nvar user = OwnUser.get(function () {\n   console.log(user.firstname);\n});\n\n// changing the username\nvar user = OwnUser.get(function () {\n   user.firstname == 'Joel';\n   user.$save();\n});\n// or directly\nOwnUser.save({firstname: 'Joel'});\n\n// deleting the user\nvar user = OwnUser.get(function () {\n   user.$delete();\n});\n// or directly\nOwnUser.delete();\n * \n */\nangular.module('dias.core').factory('OwnUser', function ($resource, URL) {\n\t\"use strict\";\n\n\treturn $resource(URL + '/api/v1/users/my', {}, {\n\t\tsave: {method: 'PUT'}\n\t});\n});","/**\n * @ngdoc factory\n * @name Project\n * @memberOf dias.core\n * @description Provides the resource for projects.\n * @requires $resource\n * @returns {Object} A new [ngResource](https://docs.angularjs.org/api/ngResource/service/$resource) object\n * @example\n// get all projects, the current user belongs to\nvar projects = Project.query(function () {\n   console.log(projects); // [{id: 1, name: \"Test Project\", ...}, ...]\n});\n\n// get one project\nvar project = Project.get({id: 1}, function () {\n   console.log(project); // {id: 1, name: \"Test Project\", ...}\n});\n\n// create a new project\nvar project = Project.add({name: \"My Project\", description: \"my project\"},\n   function () {\n      console.log(project); // {id: 2, name: \"My Project\", ...}\n   }\n);\n\n// update a project\nvar project = Project.get({id: 1}, function () {\n   project.name = 'New Project';\n   project.$save();\n});\n// or directly\nProject.save({id: 1, name: 'New Project'});\n\n// delete a project\nvar project = Project.get({id: 1}, function () {\n   project.$delete();\n});\n// or directly\nProject.delete({id: 1});\n *\n */\nangular.module('dias.core').factory('Project', function ($resource, URL) {\n\t\"use strict\";\n\n\treturn $resource(URL + '/api/v1/projects/:id', { id: '@id' },\n\t\t{\n\t\t\t// a user can only query their own projects\n\t\t\tquery: { method: 'GET', params: { id: 'my' }, isArray: true },\n\t\t\tadd: { method: 'POST' },\n\t\t\tsave: { method: 'PUT' }\n\t\t}\n\t);\n});","/**\n * @ngdoc factory\n * @name ProjectTransect\n * @memberOf dias.core\n * @description Provides the resource for transects belonging to a project.\n * @requires $resource\n * @returns {Object} A new [ngResource](https://docs.angularjs.org/api/ngResource/service/$resource) object\n * @example\n// get all transects of the project with ID 1\nvar transects = ProjectTransect.query({ project_id: 1 }, function () {\n   console.log(transects); // [{id: 1, name: \"transect 1\", ...}, ...]\n});\n\n// add a new transect to the project with ID 1\nvar transect = ProjectTransect.add({project_id: 1},\n   {\n      name: \"transect 1\",\n      url: \"/vol/transects/1\",\n      media_type_id: 1,\n      images: [\"1.jpg\", \"2.jpg\"]\n   },\n   function () {\n      console.log(transect); // {id: 1, name: \"transect 1\", ...}\n   }\n);\n\n// attach an existing transect to another project\nvar transects = ProjectTransect.query({ project_id: 1 }, function () {\n   var transect = transects[0];\n   // transect is now attached to project 1 *and* 2\n   transect.$attach({project_id: 2});\n});\n// or directly (transect 1 will be attached to project 2)\nProjectTransect.attach({project_id: 2}, {id: 1});\n\n// detach a transect from the project with ID 1\nvar transects = ProjectTransect.query({ project_id: 1 }, function () {\n   var transect = transects[0];\n   transect.$detach({project_id: 1});\n});\n// or directly\nProjectTransect.detach({project_id: 1}, {id: 1});\n\n// attaching and detaching can be done using a Transect object as well:\nvar transect = Transect.get({id: 1}, function () {\n   ProjectTransect.attach({project_id: 2}, transect);\n});\n *\n */\nangular.module('dias.core').factory('ProjectTransect', function ($resource, URL) {\n\t\"use strict\";\n\n\treturn $resource(URL + '/api/v1/projects/:project_id/transects/:id',\n\t\t{ id: '@id' },\n\t\t{\n\t\t\tadd: { method: 'POST' },\n\t\t\tattach: { method: 'POST' },\n\t\t\tdetach: { method: 'DELETE' }\n\t\t}\n\t);\n});","/**\n * @ngdoc factory\n * @name ProjectUser\n * @memberOf dias.core\n * @description Provides the resource for users belonging to a project.\n * @requires $resource\n * @returns {Object} A new [ngResource](https://docs.angularjs.org/api/ngResource/service/$resource) object\n * @example\n// get all users of the project with ID 1\nvar users = ProjectUser.query({ project_id: 1 }, function () {\n   console.log(users); // [{id: 1, firstname: \"Jane\", ...}, ...]\n});\n\n// update the project role of a user\nProjectUser.save({project_id: 1}, {id: 1, project_role_id: 1});\n\n// attach a user to another project\nProjectUser.attach({project_id: 2}, {id: 1, project_role_id: 2});\n\n// detach a user from the project with ID 1\nvar users = ProjectUser.query({ project_id: 1 }, function () {\n   var user = users[0];\n   user.$detach({project_id: 1});\n});\n// or directly\nProjectUser.detach({project_id: 1}, {id: 1});\n *\n */\nangular.module('dias.core').factory('ProjectUser', function ($resource, URL) {\n\t\"use strict\";\n\n\treturn $resource(URL + '/api/v1/projects/:project_id/users/:id',\n\t\t{ id: '@id' },\n\t\t{\n\t\t\tsave: { method: 'PUT' },\n\t\t\tattach: { method: 'POST' },\n\t\t\tdetach: { method: 'DELETE' }\n\t\t}\n\t);\n});","/**\n * @ngdoc factory\n * @name Role\n * @memberOf dias.core\n * @description Provides the resource for roles.\n * @requires $resource\n * @returns {Object} A new [ngResource](https://docs.angularjs.org/api/ngResource/service/$resource) object\n * @example\n// get all roles\nvar roles = Role.query(function () {\n   console.log(roles); // [{id: 1, name: \"admin\"}, ...]\n});\n\n// get one role\nvar role = Role.get({id: 1}, function () {\n   console.log(role); // {id: 1, name: \"admin\"}\n});\n *\n */\nangular.module('dias.core').factory('Role', function ($resource, URL) {\n\t\"use strict\";\n\n\treturn $resource(URL + '/api/v1/roles/:id', { id: '@id' });\n});","/**\n * @ngdoc factory\n * @name Shape\n * @memberOf dias.core\n * @description Provides the resource for shapes.\n * @requires $resource\n * @returns {Object} A new [ngResource](https://docs.angularjs.org/api/ngResource/service/$resource) object\n * @example\n// get all shapes\nvar shapes = Shape.query(function () {\n   console.log(shapes); // [{id: 1, name: \"point\"}, ...]\n});\n\n// get one shape\nvar shape = Shape.get({id: 1}, function () {\n   console.log(shape); // {id: 1, name: \"point\"}\n});\n *\n */\nangular.module('dias.core').factory('Shape', function ($resource, URL) {\n\t\"use strict\";\n\n\treturn $resource(URL + '/api/v1/shapes/:id', { id: '@id' });\n});","/**\n * @ngdoc factory\n * @name Transect\n * @memberOf dias.core\n * @description Provides the resource for transects.\n * @requires $resource\n * @returns {Object} A new [ngResource](https://docs.angularjs.org/api/ngResource/service/$resource) object\n * @example\n// get one transect\nvar transect = Transect.get({id: 1}, function () {\n   console.log(transect); // {id: 1, name: \"transect 1\"}\n});\n\n// update a transect\nvar transect = Transect.get({id: 1}, function () {\n   transect.name = \"my transect\";\n   transect.$save();\n});\n// or directly\nTransect.save({id: 1, name: \"my transect\"});\n *\n */\nangular.module('dias.core').factory('Transect', function ($resource, URL) {\n\t\"use strict\";\n\n\treturn $resource(URL + '/api/v1/transects/:id',\n\t\t{ id: '@id' },\n\t\t{\n\t\t\tsave: { method: 'PUT' }\n\t\t}\n\t\t);\n});","/**\n * @ngdoc factory\n * @name TransectImage\n * @memberOf dias.core\n * @description Provides the resource for images of transects.\n * @requires $resource\n * @returns {Object} A new [ngResource](https://docs.angularjs.org/api/ngResource/service/$resource) object\n * @example\n// get the IDs of all images of the transect with ID 1\nvar images = TransectImage.query({transect_id: 1}, function () {\n   console.log(images); // [1, 12, 14, ...]\n});\n *\n */\nangular.module('dias.core').factory('TransectImage', function ($resource, URL) {\n\t\"use strict\";\n\n\treturn $resource(URL + '/api/v1/transects/:transect_id/images');\n});","/**\n * @ngdoc factory\n * @name User\n * @memberOf dias.core\n * @description Provides the resource for users.\n * @requires $resource\n * @returns {Object} A new [ngResource](https://docs.angularjs.org/api/ngResource/service/$resource) object\n * @example\n// get a list of all users\nvar users = User.query(function () {\n   console.log(users); // [{id: 1, firstname: \"Jane\", ...}, ...]\n});\n\n// retrieving the username\nvar user = User.get({id: 1}, function () {\n   console.log(user.firstname);\n});\n\n// creating a new user\nvar user = User.add(\n   {\n      email: 'my@mail.com',\n      password: '123456pw',\n      password_confirmation: '123456pw',\n      firstname: 'jane',\n      lastname: 'user'\n   },\n   function () {\n      console.log(user); // {id: 1, firstname: 'jane', ...}\n   }\n);\n\n// changing the username\nvar user = User.get({id: 1}, function () {\n   user.firstname == 'Joel';\n   user.$save();\n});\n// or directly\nUser.save({id: 1, firstname: 'Joel'});\n\n// deleting the user\nvar user = User.get({id: 1}, function () {\n   user.$delete();\n});\n// or directly\nUser.delete({id: 1});\n * \n */\nangular.module('dias.core').factory('User', function ($resource, URL) {\n\t\"use strict\";\n\n\treturn $resource(URL + '/api/v1/users/:id', {id: '@id'}, {\n\t\tsave: { method: 'PUT' },\n\t\tadd: { method: 'POST' }\n\t});\n});"],"sourceRoot":"/source/"}